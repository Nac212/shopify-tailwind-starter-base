{% doc %}
  @prompt
    can you generate an add to cart button which also contains a quantity selector inside of it. I want add to cart to hold 70% of the space, and the - *quantity* + to have 30%, i need the button to add products to cart. Connect products inside the code pls

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-cart-button-container-{{ ai_gen_id }} {
    display: flex;
    align-items: stretch;
    width: 100%;
    max-width: {{ block.settings.max_width }}px;
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .ai-quantity-selector-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    width: 30%;
    background-color: {{ block.settings.quantity_bg_color }};
    border: 1px solid {{ block.settings.border_color }};
    border-right: none;
  }

  .ai-quantity-button-{{ ai_gen_id }} {
    background: none;
    border: none;
    color: {{ block.settings.quantity_text_color }};
    cursor: pointer;
    padding: 12px 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
    min-width: 40px;
  }

  .ai-quantity-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.quantity_hover_color }};
  }

  .ai-quantity-button-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .ai-quantity-input-{{ ai_gen_id }} {
    background: none;
    border: none;
    text-align: center;
    color: {{ block.settings.quantity_text_color }};
    font-size: {{ block.settings.font_size }}px;
    width: 100%;
    padding: 0 4px;
    outline: none;}

  .ai-add-to-cart-button-{{ ai_gen_id }} {
    width: 70%;
    background-color: {{ block.settings.button_bg_color }};
    color: {{ block.settings.button_text_color }};
    border: 1px solid {{ block.settings.border_color }};
    border-left: none;
    cursor: pointer;
    font-size: {{ block.settings.font_size }}px;
    font-weight: 600;
    transition: background-color 0.2s ease;
    padding: 12px 16px;
  }

  .ai-add-to-cart-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
  }

  .ai-add-to-cart-button-{{ ai_gen_id }}:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .ai-product-selector-{{ ai_gen_id }} {
    margin-bottom: 16px;
    padding: 12px;
    background-color: {{ block.settings.quantity_bg_color }};
    border-radius: {{ block.settings.border_radius }}px;
    border: 1px solid {{ block.settings.border_color }};
  }

  .ai-product-info-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 8px;
  }

  .ai-product-image-{{ ai_gen_id }} {
    width: 60px;
    height: 60px;
    flex-shrink: 0;
  }

  .ai-product-image-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
  }

  .ai-product-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
  }

  .ai-product-placeholder-{{ ai_gen_id }} svg {
    width: 30px;
    height: 30px;
    color: #999;
  }

  .ai-product-details-{{ ai_gen_id }} {
    flex-grow: 1;
  }

  .ai-product-title-{{ ai_gen_id }} {
    font-size: 14px;
    font-weight: 600;
    margin: 0 0 4px;color: {{ block.settings.quantity_text_color }};
  }

  .ai-product-price-{{ ai_gen_id }} {
    font-size: 14px;
    color: {{ block.settings.quantity_text_color }};
    margin: 0;
  }

  .ai-variant-selector-{{ ai_gen_id }} {
    margin-top: 8px;
  }

  .ai-variant-select-{{ ai_gen_id }} {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid {{ block.settings.border_color }};
    border-radius: 4px;
    background-color: white;
    font-size: 14px;
  }

  .ai-empty-state-{{ ai_gen_id }} {
    text-align: center;
    color: #999;
    font-style: italic;
    padding: 20px;
  }

  @media screen and (max-width: 749px) {
    .ai-cart-button-container-{{ ai_gen_id }} {
      max-width: 100%;
    }
    
    .ai-quantity-button-{{ ai_gen_id }} {
      padding: 10px 6px;
      min-width: 35px;
    }
    
    .ai-add-to-cart-button-{{ ai_gen_id }} {
      font-size: {{ block.settings.font_size | minus: 2 }}px;padding: 10px 12px;
    }
  }
{% endstyle %}

<cart-quantity-button-{{ ai_gen_id }}
  class="ai-cart-button-container-wrapper-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.selected_product %}
    <div class="ai-product-selector-{{ ai_gen_id }}">
      <div class="ai-product-info-{{ ai_gen_id }}">
        <div class="ai-product-image-{{ ai_gen_id }}">
          {% if block.settings.selected_product.featured_image %}
            <img
              src="{{ block.settings.selected_product.featured_image | image_url: width: 120}}"
              alt="{{ block.settings.selected_product.featured_image.alt | escape }}"
              width="120"
              height="120"
              loading="lazy"
            >
          {% else %}
            <div class="ai-product-placeholder-{{ ai_gen_id }}">
              {{'product-1' | placeholder_svg_tag }}
            </div>
          {% endif %}
        </div>
        <div class="ai-product-details-{{ ai_gen_id }}">
          <h3 class="ai-product-title-{{ ai_gen_id }}">{{ block.settings.selected_product.title }}</h3>
          <p class="ai-product-price-{{ ai_gen_id }}">{{ block.settings.selected_product.price | money }}</p>
        </div>
      </div>
      
      {% if block.settings.selected_product.variants.size > 1 %}
        <div class="ai-variant-selector-{{ ai_gen_id }}">
          <select class="ai-variant-select-{{ ai_gen_id }}" data-variant-selector>
            {% for variant in block.settings.selected_product.variants %}
              <option 
                value="{{ variant.id }}" 
                {% unless variant.available %}disabled{% endunless %}
                data-price="{{ variant.price }}"
              >
                {{ variant.title }}{% unless variant.available %} - Sold out{% endunless %}
              </option>
            {% endfor %}
          </select>
        </div>
      {% endif %}
    </div>

    <div class="ai-cart-button-container-{{ ai_gen_id }}">
      <div class="ai-quantity-selector-{{ ai_gen_id }}">
        <button
          type="button"
          class="ai-quantity-button-{{ ai_gen_id }} ai-quantity-decrease-{{ ai_gen_id }}"
          aria-label="Decrease quantity"
        >
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M3 8H13" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </button>
        <input
          type="number"
          class="ai-quantity-input-{{ ai_gen_id }}"
          value="1"
          min="1"
          max="99"
          aria-label="Quantity"
        >
        <button
          type="button"
          class="ai-quantity-button-{{ ai_gen_id }} ai-quantity-increase-{{ ai_gen_id }}"
          aria-label="Increase quantity"
        >
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8 3V13M3 8H13" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </button>
      </div>

      <button
        type="button"
        class="ai-add-to-cart-button-{{ ai_gen_id }}"
        data-variant-id="{{ block.settings.selected_product.selected_or_first_available_variant.id }}"
        {% unless block.settings.selected_product.available %}disabled{% endunless %}>
        {% if block.settings.selected_product.available %}
          {{ block.settings.button_text }}
        {% else %}
          {{ block.settings.sold_out_text }}
        {% endif %}
      </button>
    </div>
  {% else %}
    <div class="ai-empty-state-{{ ai_gen_id }}">
      Select a product to enable the add to cart button
    </div>
  {% endif %}
</cart-quantity-button-{{ ai_gen_id }}><script>
  (function() {
    class CartQuantityButton{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.quantityInput = this.querySelector('.ai-quantity-input-{{ ai_gen_id }}');
        this.decreaseButton = this.querySelector('.ai-quantity-decrease-{{ ai_gen_id }}');
        this.increaseButton = this.querySelector('.ai-quantity-increase-{{ ai_gen_id }}');
        this.addToCartButton = this.querySelector('.ai-add-to-cart-button-{{ ai_gen_id }}');
        this.variantSelector = this.querySelector('.ai-variant-select-{{ ai_gen_id }}');
        this.productPrice = this.querySelector('.ai-product-price-{{ ai_gen_id }}');
      }

      connectedCallback() {
        this.setupEventListeners();
        this.updateButtonStates();
      }

      setupEventListeners() {
        if (this.decreaseButton) {
          this.decreaseButton.addEventListener('click', () => {
            this.changeQuantity(-1);
          });
        }

        if (this.increaseButton) {
          this.increaseButton.addEventListener('click', () => {
            this.changeQuantity(1);
          });
        }

        if (this.quantityInput) {
          this.quantityInput.addEventListener('input', () => {
            this.validateQuantity();
            this.updateButtonStates();
          });

          this.quantityInput.addEventListener('blur', () => {
            this.validateQuantity();
          });
        }

        if (this.addToCartButton) {
          this.addToCartButton.addEventListener('click', () => {
            this.addToCart();
          });
        }

        if (this.variantSelector) {
          this.variantSelector.addEventListener('change', () => {
            this.updateVariant();
          });
        }
      }

      changeQuantity(change) {
        if (!this.quantityInput) return;
        const currentValue = parseInt(this.quantityInput.value) || 1;
        const newValue = Math.max(1, Math.min(99, currentValue + change));
        this.quantityInput.value = newValue;
        this.updateButtonStates();
      }

      validateQuantity() {
        if (!this.quantityInput) return;
        let value = parseInt(this.quantityInput.value);
        if (isNaN(value) || value < 1) {
          value = 1;
        } else if (value > 99) {
          value = 99;
        }
        this.quantityInput.value = value;
      }

      updateButtonStates() {
        if (!this.quantityInput || !this.decreaseButton || !this.increaseButton) return;
        const quantity = parseInt(this.quantityInput.value) || 1;
        this.decreaseButton.disabled = quantity <= 1;
        this.increaseButton.disabled = quantity >= 99;
      }

      updateVariant() {
        if (!this.variantSelector || !this.addToCartButton) return;
        const selectedOption = this.variantSelector.options[this.variantSelector.selectedIndex];
        const variantId = selectedOption.value;
        const isAvailable = !selectedOption.disabled;
        const price = selectedOption.dataset.price;

        this.addToCartButton.dataset.variantId = variantId;
        this.addToCartButton.disabled = !isAvailable;
        
        if (isAvailable) {
          this.addToCartButton.textContent = '{{ block.settings.button_text }}';
        } else {
          this.addToCartButton.textContent = '{{ block.settings.sold_out_text }}';
        }

        if (this.productPrice && price) {
          this.productPrice.textContent = new Intl.NumberFormat('{{ shop.locale }}', {
            style: 'currency',
            currency: '{{ shop.currency }}'
          }).format(price / 100);
        }
      }

      async addToCart() {
        if (!this.addToCartButton || this.addToCartButton.disabled) return;
        
        const quantity = parseInt(this.quantityInput?.value) || 1;
        const variantId = this.addToCartButton.dataset.variantId;
        
        if (!variantId) return;

        this.addToCartButton.disabled = true;
        const originalText = this.addToCartButton.textContent;
        this.addToCartButton.textContent = '{{ block.settings.loading_text }}';

        try {
          const formData = {
            'items': [{
              'id': parseInt(variantId),
              'quantity': quantity
            }]
          };

          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
          });

          if (response.ok) {
            window.dispatchEvent(new CustomEvent('cart:refresh'));
            
            if (window.theme && window.theme.cart && window.theme.cart.refresh) {
              window.theme.cart.refresh();
            }
            
            this.addToCartButton.textContent = '{{ block.settings.success_text }}';
            setTimeout(() => {
              this.addToCartButton.textContent = originalText;
              this.addToCartButton.disabled = false;
            }, 2000);
          } else {
            const errorData = await response.json();
            throw new Error(errorData.description || 'Failed to add to cart');
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
          this.addToCartButton.textContent = '{{ block.settings.error_text }}';
          setTimeout(() => {
            this.addToCartButton.textContent = originalText;
            this.addToCartButton.disabled = false;
          }, 2000);
        }
      }
    }

    customElements.define('cart-quantity-button-{{ ai_gen_id }}', CartQuantityButton{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Add to cart with quantity",
  "settings": [
    {
      "type": "header",
      "content": "Product"
    },
    {
      "type": "product",
      "id": "selected_product",
      "label": "Product"
    },
    {
      "type": "header",
      "content": "Button text"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Add to cart text",
      "default": "Add to cart"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold out text",
      "default": "Sold out"
    },
    {
      "type": "text",
      "id": "loading_text",
      "label": "Loading text",
      "default": "Adding..."
    },
    {
      "type": "text",
      "id": "success_text",
      "label": "Success text",
      "default": "Added!"
    },
    {
      "type": "text",
      "id": "error_text",
      "label": "Error text",
      "default": "Error"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 200,
      "max": 500,
      "step": 10,
      "unit": "px",
      "label": "Maximum width",
      "default": 350
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 16
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Add to cart button colors"
    },
    {
      "type": "color",
      "id": "button_bg_color",
      "label": "Background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Hover background color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Text color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Quantity selector colors"
    },
    {
      "type": "color",
      "id": "quantity_bg_color",
      "label": "Background color",
      "default": "#f8f8f8"
    },
    {
      "type": "color",
      "id": "quantity_hover_color",
      "label": "Hover background color",
      "default": "#e8e8e8"
    },
    {
      "type": "color",
      "id": "quantity_text_color",
      "label": "Text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#d0d0d0"
    }
  ],
  "presets": [
    {
      "name": "Add to cart with quantity"
    }
  ]
}
{% endschema %}