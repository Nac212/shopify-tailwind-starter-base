{% comment %}
  Shopify section code updated by Gemini.
  - V6 FIX: Added full sale badge customization (background, border, text color), implemented drag-to-scroll functionality, and added header navigation arrows.
{% endcomment %}

{% style %}
  .ai-product-carousel-{{ ai_gen_id }} {
    width: 100%;
    padding: 40px 20px;
    box-sizing: border-box;
  }

  .ai-product-carousel__header-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin: 0 0 30px 0;
  }

  .ai-product-carousel__heading-{{ ai_gen_id }} {
    font-family: {{ block.settings.heading_font.family }}, {{ block.settings.heading_font.fallback_families }};
    font-weight: {{ block.settings.heading_font.weight }};
    font-style: {{ block.settings.heading_font.style }};
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0;
    flex-grow: 0;
    white-space: nowrap;
  }

  .ai-product-carousel__arrow-{{ ai_gen_id }} {
    border: none;
    background: none;
    cursor: pointer;
    padding: 5px;
  }

  .ai-product-carousel__arrow-{{ ai_gen_id }} svg {
    width: 12px;
    height: 12px;
  }

  .ai-product-carousel__container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
  }

  .ai-product-carousel__track-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.card_spacing }}px;
    overflow-x: auto;
    scroll-behavior: smooth;
    scrollbar-width: none;
    -ms-overflow-style: none;
    padding-bottom: 20px;
    cursor: grab;
    user-select: none;
  }

  .ai-product-carousel__track-{{ ai_gen_id }}.active {
      cursor: grabbing;
  }

  .ai-product-carousel__track-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .ai-product-carousel__card-{{ ai_gen_id }} {
    flex: 0 0 auto;
    width: calc((100% - ({{ block.settings.card_spacing }}px * 4)) / 4.3);
    min-width: 200px;
  }

  .ai-product-carousel__image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: {% if block.settings.aspect_ratio == 'portrait' %} 3 / 4 {% elsif block.settings.aspect_ratio == 'original' %} auto {% else %} 1 / 1 {% endif %};
    margin-bottom: 12px;
    overflow: hidden;
    border-radius: {{ block.settings.card_border_radius }}px;
  }

  .ai-product-carousel__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    pointer-events: none; /* Prevent image drag interference */
  }

  .ai-product-carousel__card-{{ ai_gen_id }}:hover .ai-product-carousel__image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-product-carousel__sale-badge-{{ ai_gen_id }} {
    position: absolute;
    top: 10px;
    left: 10px;
    background-color: {{ block.settings.sale_badge_background_color }};
    color: {{ block.settings.sale_badge_color }};
    border: 1px solid {{ block.settings.sale_badge_border_color }};
    font-family: "Poppins", sans-serif;
    padding: 5px 10px;
    font-size: {{ block.settings.sale_badge_size }}px;
    font-weight: 500;
    border-radius: 0;
    z-index: 2;
    letter-spacing: 1.5px;
  }

  .ai-product-carousel__title-{{ ai_gen_id }} {
    font-family: {{ block.settings.product_font.family }}, {{ block.settings.product_font.fallback_families }};
    font-weight: {{ block.settings.product_font.weight }};
    font-style: {{ block.settings.product_font.style }};
    font-size: {{ block.settings.desktop_product_title_size }}px;
    color: {{ block.settings.product_title_color }};
    margin: 0 0 8px 0;
    line-height: 1.3;
    {% if block.settings.product_text_center %}
      text-align: center;
    {% else %}
      text-align: left;
    {% endif %}
  }

  .ai-product-carousel__price-{{ ai_gen_id }} {
    font-family: {{ block.settings.product_font.family }}, {{ block.settings.product_font.fallback_families }};
    font-weight: {{ block.settings.product_font.weight }};
    font-style: {{ block.settings.product_font.style }};
    font-size: {{ block.settings.desktop_product_price_size }}px;
    margin: 0;
    {% if block.settings.product_text_center %}
      text-align: center;
    {% else %}
      text-align: left;
    {% endif %}
  }

  .ai-product-carousel__price-regular-{{ ai_gen_id }} {
    color: {{ block.settings.regular_price_color }};
  }

  .ai-product-carousel__price-sale-{{ ai_gen_id }} {
    color: {{ block.settings.sale_price_color }};
    margin-left: 8px;
  }

  .ai-product-carousel__price-compare-{{ ai_gen_id }} {
    text-decoration: line-through;
    color: {{ block.settings.regular_price_color }};
    opacity: 0.7;
  }

  .ai-product-carousel__pagination-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 8px;
    margin-top: 20px;
  }

  .ai-product-carousel__dot-{{ ai_gen_id }} {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #ccc;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .ai-product-carousel__dot-{{ ai_gen_id }}.active {
    background-color: #333;
  }

  .ai-product-carousel__link-{{ ai_gen_id }} {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  @media screen and (max-width: 768px) {
    .ai-product-carousel__card-{{ ai_gen_id }} {
      {% assign mobile_divisor = block.settings.mobile_columns | plus: 0.3 %}
      width: calc((100% - {{ block.settings.card_spacing }}px) / {{ mobile_divisor }});
      min-width: 140px;
    }

    .ai-product-carousel__heading-{{ ai_gen_id }} {
      font-size: {{ block.settings.heading_size | times: 0.8 }}px;
    }

    .ai-product-carousel__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.mobile_product_title_size }}px;
    }

    .ai-product-carousel__price-{{ ai_gen_id }} {
      font-size: {{ block.settings.mobile_product_price_size }}px;
    }
  }
{% endstyle %}

<div class="ai-product-carousel-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <div class="ai-product-carousel__header-{{ ai_gen_id }}">
    <button class="ai-product-carousel__arrow-{{ ai_gen_id }}" data-arrow-left>
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
    </button>
    {% if block.settings.heading != blank %}
      <h2 class="ai-product-carousel__heading-{{ ai_gen_id }}">{{ block.settings.heading | escape }}</h2>
    {% endif %}
    <button class="ai-product-carousel__arrow-{{ ai_gen_id }}" data-arrow-right>
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
    </button>
  </div>

  {% comment %} --- Product Selection Logic --- {% endcomment %}
  {%- assign products_to_show = "" | split: "," -%}

  {%- if block.settings.manual_products != blank and block.settings.manual_products.size > 0 -%}
    {%- assign products_to_show = block.settings.manual_products -%}
  {%- elsif block.settings.collection != blank and block.settings.collection.products.size > 0 -%}
    {%- assign products_to_show = block.settings.collection.products -%}
  {%- endif -%}

  {% if products_to_show.size > 0 %}
    <product-carousel-{{ ai_gen_id }} class="ai-product-carousel__container-{{ ai_gen_id }}">
      <div class="ai-product-carousel__track-{{ ai_gen_id }}" data-track>
        {% for product in products_to_show limit: block.settings.max_products_to_show %}
          <div class="ai-product-carousel__card-{{ ai_gen_id }}">
            <a href="{{ product.url }}" class="ai-product-carousel__link-{{ ai_gen_id }}">
              <div class="ai-product-carousel__image-container-{{ ai_gen_id }}">
                {% if product.featured_image %}
                  <img
                    src="{{ product.featured_image | image_url: width: 400 }}"
                    alt="{{ product.featured_image.alt | escape }}"
                    class="ai-product-carousel__image-{{ ai_gen_id }}"
                    loading="lazy"
                    width="400"
                    height="400"
                  >
                {% else %}
                  <div class="ai-product-carousel__image-placeholder-{{ ai_gen_id }}">
                    {{ 'product-1' | placeholder_svg_tag }}
                  </div>
                {% endif %}

                {% if product.compare_at_price > product.price %}
                  <div class="ai-product-carousel__sale-badge-{{ ai_gen_id }}">
                    {{ block.settings.sale_badge_text | escape }}
                  </div>
                {% endif %}
              </div>

              <h3 class="ai-product-carousel__title-{{ ai_gen_id }}">{{ product.title | escape }}</h3>

              <div class="ai-product-carousel__price-{{ ai_gen_id }}">
                {% if product.compare_at_price > product.price %}
                  <span class="ai-product-carousel__price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
                  <span class="ai-product-carousel__price-sale-{{ ai_gen_id }}">{{ product.price | money }}</span>
                {% else %}
                  <span class="ai-product-carousel__price-regular-{{ ai_gen_id }}">{{ product.price | money }}</span>
                {% endif %}
              </div>
            </a>
          </div>
        {% endfor %}
      </div>

      <div class="ai-product-carousel__pagination-{{ ai_gen_id }}" data-pagination></div>
    </product-carousel-{{ ai_gen_id }}>
  {% else %}
    <div class="ai-product-carousel__empty-state-{{ ai_gen_id }}">
      <h3>No products to display</h3>
      <p>Select a collection or add products manually in the theme editor.</p>
    </div>
  {% endif %}
</div>

<script>
  (function() {
    class ProductCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.track = this.querySelector('[data-track]');
        this.pagination = this.querySelector('[data-pagination]');
        this.arrowLeft = document.querySelector('[data-arrow-left]');
        this.arrowRight = document.querySelector('[data-arrow-right]');
        this.cards = this.track ? Array.from(this.track.children) : [];
        
        if (this.cards.length === 0) return;

        this.isDown = false;
        this.startX;
        this.scrollLeft;
        this.isDragging = false;

        this.debouncedOnResize = this.debounce(this.onResize.bind(this), 250);
        this.init();
      }

      init() {
        this.updateProperties();
        this.setupEventListeners();
        this.setupPagination();
        this.updatePaginationDots();
      }

      setupEventListeners() {
        this.track.addEventListener('mousedown', this.handleMouseDown.bind(this));
        this.track.addEventListener('mouseleave', this.handleMouseLeave.bind(this));
        this.track.addEventListener('mouseup', this.handleMouseUp.bind(this));
        this.track.addEventListener('mousemove', this.handleMouseMove.bind(this));
        
        this.arrowLeft.addEventListener('click', this.scrollLeftByOne.bind(this));
        this.arrowRight.addEventListener('click', this.scrollRightByOne.bind(this));
        
        // Prevent click on drag
        this.querySelectorAll('a').forEach(a => {
            a.addEventListener('click', (e) => {
                if(this.isDragging) {
                    e.preventDefault();
                }
            });
        });
      }

      handleMouseDown(e) {
        this.isDown = true;
        this.isDragging = false;
        this.track.classList.add('active');
        this.startX = e.pageX - this.track.offsetLeft;
        this.scrollLeft = this.track.scrollLeft;
      }

      handleMouseLeave() {
        this.isDown = false;
        this.track.classList.remove('active');
      }

      handleMouseUp() {
        this.isDown = false;
        this.track.classList.remove('active');
        // Reset dragging flag after a short delay to ensure click event is processed
        setTimeout(() => this.isDragging = false, 50);
      }

      handleMouseMove(e) {
        if (!this.isDown) return;
        e.preventDefault();
        this.isDragging = true;
        const x = e.pageX - this.track.offsetLeft;
        const walk = (x - this.startX) * 2; // the *2 makes the scroll faster
        this.track.scrollLeft = this.scrollLeft - walk;
        this.updatePaginationOnScroll();
      }

      scrollLeftByOne() {
        const itemWidth = this.cards[0].offsetWidth + {{ block.settings.card_spacing }};
        this.track.scrollBy({ left: -itemWidth, behavior: 'smooth' });
        this.updatePaginationOnScroll();
      }

      scrollRightByOne() {
        const itemWidth = this.cards[0].offsetWidth + {{ block.settings.card_spacing }};
        this.track.scrollBy({ left: itemWidth, behavior: 'smooth' });
        this.updatePaginationOnScroll();
      }

      connectedCallback() {
        if (this.cards.length > 0) {
            window.addEventListener('resize', this.debouncedOnResize);
        }
      }

      disconnectedCallback() {
         if (this.cards.length > 0) {
            window.removeEventListener('resize', this.debouncedOnResize);
         }
      }

      updateProperties() {
        if (window.innerWidth <= 768) {
          this.cardsPerPage = {{ block.settings.mobile_columns }};
        } else {
          this.cardsPerPage = 4.3;
        }
        this.totalPages = this.cards.length > 0 ? Math.ceil(this.cards.length / this.cardsPerPage) : 0;
        this.currentPage = this.calculateCurrentPage();
      }
      
      onResize() {
        this.updateProperties();
        this.setupPagination();
        this.updatePaginationDots();
      }

      setupPagination() {
        if (!this.pagination) return;
        this.pagination.innerHTML = '';

        if (this.totalPages <= 1) {
            this.pagination.style.display = 'none';
            return;
        }
        
        this.pagination.style.display = 'flex';
        for (let i = 0; i < this.totalPages; i++) {
          const dot = document.createElement('div');
          dot.className = 'ai-product-carousel__dot-{{ ai_gen_id }}';
          dot.addEventListener('click', () => this.goToPage(i));
          this.pagination.appendChild(dot);
        }
      }

      updatePaginationOnScroll() {
        let scrollTimeout;
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
            this.currentPage = this.calculateCurrentPage();
            this.updatePaginationDots();
        }, 150);
      }
      
      calculateCurrentPage() {
        if (!this.track || !this.cards[0]) return 0;
        const scrollLeft = this.track.scrollLeft;
        const itemWidth = this.cards[0].offsetWidth + {{ block.settings.card_spacing }};
        const page = Math.round(scrollLeft / (itemWidth * this.cardsPerPage));
        return Math.max(0, Math.min(page, this.totalPages - 1));
      }

      updatePaginationDots() {
        if (!this.pagination) return;
        const dots = this.pagination.children;
        for (let i = 0; i < dots.length; i++) {
          dots[i].classList.toggle('active', i === this.currentPage);
        }
      }

      goToPage(pageIndex) {
        if (!this.track || !this.cards[0]) return;
        const itemWidth = this.cards[0].offsetWidth + {{ block.settings.card_spacing }};
        const scrollLeft = pageIndex * itemWidth * this.cardsPerPage;
        
        this.track.scrollTo({ left: scrollLeft, behavior: 'smooth' });
        this.currentPage = pageIndex;
        this.updatePaginationDots();
      }

      debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      };
    }

    customElements.define('product-carousel-{{ ai_gen_id }}', ProductCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
  {
    "name": "Product Carousel",
    "settings": [
      {
        "type": "header",
        "content": "Content"
      },
      {
        "type": "text",
        "id": "heading",
        "label": "Heading",
        "default": "TRENDING PIECES"
      },
      {
        "type": "collection",
        "id": "collection",
        "label": "Fallback Collection"
      },
      {
        "type": "product_list",
        "id": "manual_products",
        "label": "Manual Product Selection",
        "info": "Priority #1. Overrides the collection setting if products are selected here."
      },
      {
        "type": "range",
        "id": "max_products_to_show",
        "min": 4,
        "max": 50,
        "step": 1,
        "label": "Max products to show",
        "default": 12
      },
      {
        "type": "header",
        "content": "Layout & Styling"
      },
      {
        "type": "select",
        "id": "aspect_ratio",
        "label": "Image aspect ratio",
        "options": [
          { "value": "original", "label": "Original" },
          { "value": "square", "label": "Square (1:1)" },
          { "value": "portrait", "label": "Portrait (3:4)" }
        ],
        "default": "square"
      },
      {
        "type": "range",
        "id": "mobile_columns",
        "min": 1,
        "max": 3,
        "step": 1,
        "label": "Columns on mobile",
        "info": "A third/second column will be partially visible to encourage scrolling.",
        "default": 2
      },
      {
        "type": "range",
        "id": "card_spacing",
        "min": 8,
        "max": 40,
        "step": 4,
        "unit": "px",
        "label": "Card spacing",
        "default": 16
      },
      {
        "type": "range",
        "id": "card_border_radius",
        "min": 0,
        "max": 25,
        "step": 1,
        "unit": "px",
        "label": "Card border radius",
        "default": 8
      },
      {
        "type": "header",
        "content": "Typography"
      },
      {
        "type": "font_picker",
        "id": "heading_font",
        "label": "Heading font",
        "default": "bebas_neue_n4"
      },
      {
        "type": "range",
        "id": "heading_size",
        "min": 16,
        "max": 60,
        "step": 1,
        "unit": "px",
        "label": "Heading size",
        "default": 32
      },
      {
        "type": "font_picker",
        "id": "product_font",
        "label": "Product font",
        "default": "poppins_n4"
      },
      {
        "type": "range",
        "id": "desktop_product_title_size",
        "min": 12,
        "max": 30,
        "step": 1,
        "unit": "px",
        "label": "Desktop - Title size",
        "default": 16
      },
      {
        "type": "range",
        "id": "mobile_product_title_size",
        "min": 10,
        "max": 24,
        "step": 1,
        "unit": "px",
        "label": "Mobile - Title size",
        "default": 14
      },
      {
        "type": "range",
        "id": "desktop_product_price_size",
        "min": 12,
        "max": 30,
        "step": 1,
        "unit": "px",
        "label": "Desktop - Price size",
        "default": 14
      },
      {
        "type": "range",
        "id": "mobile_product_price_size",
        "min": 10,
        "max": 24,
        "step": 1,
        "unit": "px",
        "label": "Mobile - Price size",
        "default": 13
      },
      {
        "type": "checkbox",
        "id": "heading_center",
        "label": "Center heading",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "product_text_center",
        "label": "Center product text",
        "default": false
      },
      {
        "type": "header",
        "content": "Colors & Badges"
      },
      {
        "type": "color",
        "id": "heading_color",
        "label": "Heading color",
        "default": "#000000"
      },
      {
        "type": "color",
        "id": "product_title_color",
        "label": "Product title color",
        "default": "#000000"
      },
      {
        "type": "color",
        "id": "regular_price_color",
        "label": "Regular price color",
        "default": "#000000"
      },
      {
        "type": "color",
        "id": "sale_price_color",
        "label": "Sale price color",
        "default": "#ff0000"
      },
      {
        "type": "text",
        "id": "sale_badge_text",
        "label": "Sale badge text",
        "default": "ON SALE"
      },
      {
        "type": "color",
        "id": "sale_badge_color",
        "label": "Sale badge text color",
        "default": "#ff0000"
      },
      {
        "type": "color",
        "id": "sale_badge_background_color",
        "label": "Sale badge background color",
        "default": "#ffffff"
      },
      {
        "type": "color",
        "id": "sale_badge_border_color",
        "label": "Sale badge border color",
        "default": "#ff0000"
      },
      {
        "type": "range",
        "id": "sale_badge_size",
        "min": 8,
        "max": 16,
        "step": 1,
        "unit": "px",
        "label": "Sale badge size",
        "default": 12
      }
    ],
    "presets": [
      {
        "name": "Product Carousel"
      }
    ]
  }
{% endschema %}