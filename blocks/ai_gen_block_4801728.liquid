{% comment %}
  Shopfolio section code updated with proper pagination scroll indicator.
  - Fixed pagination bar to properly highlight active section based on scroll position
  - Synchronized scroll position with visual progress bar
{% endcomment %}

{% style %}
  .ai-product-carousel-{{ ai_gen_id }} {
    width: 100%;
    padding: 40px 20px;
    box-sizing: border-box;
  }

  .ai-product-carousel__header-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin: 0 0 30px 0;
  }

  .ai-product-carousel__heading-{{ ai_gen_id }} {
    font-family: {{ block.settings.heading_font.family }}, {{ block.settings.heading_font.fallback_families }};
    font-weight: {{ block.settings.heading_font.weight }};
    font-style: {{ block.settings.heading_font.style }};
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0;
    flex-grow: 0;
    white-space: nowrap;
  }

  .ai-product-carousel__container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
  }

  .ai-product-carousel__track-wrapper-{{ ai_gen_id }} {
    position: relative;
  }

  .ai-product-carousel__side-arrow-{{ ai_gen_id }} {
    display: none;
  }

  @media screen and (min-width: 769px) {
    .ai-product-carousel__side-arrow-{{ ai_gen_id }} {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background-color: white;
      border: 1px solid #e0e0e0;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      z-index: 10;
      transition: opacity 0.3s ease, box-shadow 0.3s ease;
      opacity: 0;
    }

    .ai-product-carousel__container-{{ ai_gen_id }}:hover .ai-product-carousel__side-arrow-{{ ai_gen_id }} {
        opacity: 1;
    }

    .ai-product-carousel__side-arrow-{{ ai_gen_id }}.left {
      left: -20px;
    }

    .ai-product-carousel__side-arrow-{{ ai_gen_id }}.right {
      right: -20px;
    }

    .ai-product-carousel__side-arrow-{{ ai_gen_id }}:not(.disabled):hover {
      box-shadow: 0 0 8px rgba(0,0,0,0.15);
    }

    .ai-product-carousel__side-arrow-{{ ai_gen_id }}.disabled {
      opacity: 0 !important;
      cursor: default;
      pointer-events: none;
    }

    .ai-product-carousel__side-arrow-{{ ai_gen_id }} svg {
      width: 16px;
      height: 16px;
    }
    .ai-product-carousel__pagination-{{ ai_gen_id }} {
        display: flex;
    }
    .ai-product-carousel__scrollbar-container-{{ ai_gen_id }} {
        display: none;
    }
  }

  .ai-product-carousel__track-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.card_spacing }}px;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    padding-bottom: 20px;
    scroll-behavior: smooth;
  }

  .ai-product-carousel__track-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .ai-product-carousel__card-{{ ai_gen_id }} {
    flex: 0 0 auto;
    width: calc((100% - ({{ block.settings.card_spacing }}px * 4)) / 4.3);
    min-width: 200px;
  }

  .ai-product-carousel__image-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: {% if block.settings.aspect_ratio == 'portrait' %} 3 / 4 {% elsif block.settings.aspect_ratio == 'original' %} auto {% else %} 1 / 1 {% endif %};
    margin-bottom: 12px;
    overflow: hidden;
    border-radius: {{ block.settings.card_border_radius }}px;
  }

  .ai-product-carousel__image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    pointer-events: none;
  }

  .ai-product-carousel__card-{{ ai_gen_id }}:hover .ai-product-carousel__image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-product-carousel__sale-badge-{{ ai_gen_id }} {
    position: absolute;
    top: {{ block.settings.sale_badge_position_top_desktop }}px;
    left: {{ block.settings.sale_badge_position_left_desktop }}px;
    background-color: {{ block.settings.sale_badge_background_color }};
    color: {{ block.settings.sale_badge_color }};
    border: 1px solid {{ block.settings.sale_badge_border_color }};
    font-family: "Poppins", sans-serif;
    padding: 5px 10px;
    font-size: {{ block.settings.sale_badge_size }}px;
    font-weight: 500;
    border-radius: 0;
    z-index: 2;
    letter-spacing: 1.5px;
  }

  .ai-product-carousel__title-{{ ai_gen_id }} {
    font-family: {{ block.settings.product_font.family }}, {{ block.settings.product_font.fallback_families }};
    font-weight: {{ block.settings.product_font.weight }};
    font-style: {{ block.settings.product_font.style }};
    font-size: {{ block.settings.desktop_product_title_size }}px;
    color: {{ block.settings.product_title_color }};
    margin: 0 0 8px 0;
    line-height: 1.3;
    {% if block.settings.product_text_center %}
      text-align: center;
    {% else %}
      text-align: left;
    {% endif %}
  }

  .ai-product-carousel__price-{{ ai_gen_id }} {
    font-family: {{ block.settings.product_font.family }}, {{ block.settings.product_font.fallback_families }};
    font-weight: {{ block.settings.product_font.weight }};
    font-style: {{ block.settings.product_font.style }};
    font-size: {{ block.settings.desktop_product_price_size }}px;
    margin: 0;
    {% if block.settings.product_text_center %}
      text-align: center;
    {% else %}
      text-align: left;
    {% endif %}
  }

  .ai-product-carousel__price-regular-{{ ai_gen_id }} {
    color: {{ block.settings.regular_price_color }};
  }

  .ai-product-carousel__price-sale-{{ ai_gen_id }} {
    color: {{ block.settings.sale_price_color }};
    margin-left: 8px;
  }

  .ai-product-carousel__price-compare-{{ ai_gen_id }} {
    text-decoration: line-through;
    color: {{ block.settings.regular_price_color }};
    opacity: 0.7;
  }

  .ai-product-carousel__pagination-{{ ai_gen_id }} {
    justify-content: center;
    align-items: center;
    gap: 8px;
    margin-top: 20px;
  }

  .ai-product-carousel__dot-{{ ai_gen_id }} {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #ccc;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .ai-product-carousel__dot-{{ ai_gen_id }}.active {
    background-color: #333;
  }
  
  /* ByCharlotte-style pagination indicator */
  .ai-product-carousel__scrollbar-container-{{ ai_gen_id }} {
    width: 8rem;
    margin: 20px auto 0;
    height: 2px;
    background-color: #e0e0e0;
    border-radius: 1px;
    position: relative;
    overflow: hidden;
  }

  .ai-product-carousel__scrollbar-thumb-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 25%;
    background-color: #333;
    border-radius: 1px;
    transition: margin-left 0.3s ease-out;
  }

  @media screen and (max-width: 768px) {
    .ai-product-carousel__card-{{ ai_gen_id }} {
      width: calc((100% - {{ block.settings.card_spacing }}px) / {{ block.settings.mobile_columns }});
      min-width: 140px;
    }

    .ai-product-carousel__image-container-{{ ai_gen_id }} {
      aspect-ratio: {% if block.settings.mobile_aspect_ratio == 'portrait' %} 3 / 4 {% elsif block.settings.mobile_aspect_ratio == 'original' %} auto {% else %} 1 / 1 {% endif %};
    }

    .ai-product-carousel__heading-{{ ai_gen_id }} {
      font-size: {{ block.settings.heading_size | times: 0.8 }}px;
    }

    .ai-product-carousel__title-{{ ai_gen_id }} {
      font-size: {{ block.settings.mobile_product_title_size }}px;
    }

    .ai-product-carousel__price-{{ ai_gen_id }} {
      font-size: {{ block.settings.mobile_product_price_size }}px;
    }

    .ai-product-carousel__sale-badge-{{ ai_gen_id }} {
        font-size: {{ block.settings.mobile_sale_badge_size }}px;
        top: {{ block.settings.sale_badge_position_top_mobile }}px;
        left: {{ block.settings.sale_badge_position_left_mobile }}px;
    }
    
    {% if block.settings.enable_mobile_scrollbar %}
      .ai-product-carousel__pagination-{{ ai_gen_id }} {
          display: none;
      }
      .ai-product-carousel__scrollbar-container-{{ ai_gen_id }} {
          display: block;
      }
    {% else %}
      .ai-product-carousel__pagination-{{ ai_gen_id }} {
          display: flex;
      }
      .ai-product-carousel__scrollbar-container-{{ ai_gen_id }} {
          display: none;
      }
    {% endif %}
  }
{% endstyle %}

<div class="ai-product-carousel-{{ ai_gen_id }}" {{ block.shopify_attributes }}>
  <div class="ai-product-carousel__header-{{ ai_gen_id }}">
    {% if block.settings.heading != blank %}
      <h2 class="ai-product-carousel__heading-{{ ai_gen_id }}">{{ block.settings.heading | escape }}</h2>
    {% endif %}
  </div>

  {% comment %} --- Product Selection Logic --- {% endcomment %}
  {%- assign products_to_show = "" | split: "," -%}

  {%- if block.settings.manual_products != blank and block.settings.manual_products.size > 0 -%}
    {%- assign products_to_show = block.settings.manual_products -%}
  {%- elsif block.settings.collection != blank and block.settings.collection.products.size > 0 -%}
    {%- assign products_to_show = block.settings.collection.products -%}
  {%- endif -%}

  {% if products_to_show.size > 0 %}
    <product-carousel-{{ ai_gen_id }} class="ai-product-carousel__container-{{ ai_gen_id }}">
      <div class="ai-product-carousel__track-wrapper-{{ ai_gen_id }}">
        <button class="ai-product-carousel__side-arrow-{{ ai_gen_id }} left" data-side-arrow-left>
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
        </button>
        <div class="ai-product-carousel__track-{{ ai_gen_id }}" data-track>
          {% for product in products_to_show limit: block.settings.max_products_to_show %}
            <a href="{{ product.url }}" class="ai-product-carousel__card-{{ ai_gen_id }}">
              <div class="ai-product-carousel__image-container-{{ ai_gen_id }}">
                {% if product.featured_image %}
                  <img
                    src="{{ product.featured_image | image_url: width: 400 }}"
                    alt="{{ product.featured_image.alt | escape }}"
                    class="ai-product-carousel__image-{{ ai_gen_id }}"
                    loading="lazy"
                    width="400"
                    height="400"
                  >
                {% else %}
                  <div class="ai-product-carousel__image-placeholder-{{ ai_gen_id }}">
                    {{ 'product-1' | placeholder_svg_tag }}
                  </div>
                {% endif %}

                {% if product.compare_at_price > product.price %}
                  <div class="ai-product-carousel__sale-badge-{{ ai_gen_id }}">
                    {{ block.settings.sale_badge_text | escape }}
                  </div>
                {% endif %}
              </div>

              <h3 class="ai-product-carousel__title-{{ ai_gen_id }}">{{ product.title | escape }}</h3>

              <div class="ai-product-carousel__price-{{ ai_gen_id }}">
                {% if product.compare_at_price > product.price %}
                  <span class="ai-product-carousel__price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
                  <span class="ai-product-carousel__price-sale-{{ ai_gen_id }}">{{ product.price | money }}</span>
                {% else %}
                  <span class="ai-product-carousel__price-regular-{{ ai_gen_id }}">{{ product.price | money }}</span>
                {% endif %}
              </div>
            </a>
          {% endfor %}
        </div>
        <button class="ai-product-carousel__side-arrow-{{ ai_gen_id }} right" data-side-arrow-right>
          <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
        </button>
      </div>
      <div class="ai-product-carousel__pagination-{{ ai_gen_id }}" data-pagination></div>
      <div class="ai-product-carousel__scrollbar-container-{{ ai_gen_id }}" data-scrollbar-container>
        <div class="ai-product-carousel__scrollbar-thumb-{{ ai_gen_id }}" data-scrollbar-thumb></div>
      </div>
    </product-carousel-{{ ai_gen_id }}>
  {% else %}
    <div class="ai-product-carousel__empty-state-{{ ai_gen_id }}">
      <h3>No products to display</h3>
      <p>Select a collection or add products manually in the theme editor.</p>
    </div>
  {% endif %}
</div>

<script>
  (function() {
    class ProductCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.track = this.querySelector('[data-track]');
        this.pagination = this.querySelector('[data-pagination]');
        this.arrowLeft = this.querySelector('[data-side-arrow-left]');
        this.arrowRight = this.querySelector('[data-side-arrow-right]');
        this.scrollbarContainer = this.querySelector('[data-scrollbar-container]');
        this.scrollbarThumb = this.querySelector('[data-scrollbar-thumb]');
        this.cards = this.track ? Array.from(this.track.children) : [];
        
        if (this.cards.length === 0) return;

        this.animationFrameId = null;
        this.observer = null;
        this.isScrolling = false;
        this.scrollTimeout = null;
        this.debouncedOnResize = this.debounce(this.onResize.bind(this), 250);
        
        this.init();
      }

      init() {
        this.updateProperties();
        this.setupEventListeners();
        this.setupPagination();
        this.updateArrowState();
        this.updatePaginationDots();
        this.setupIntersectionObserver();
        
        // Initial scrollbar update
        this.updateScrollbar();
      }

      setupEventListeners() {
        this.arrowLeft.addEventListener('click', this.scrollLeftByOne.bind(this));
        this.arrowRight.addEventListener('click', this.scrollRightByOne.bind(this));
        
        // Use both scroll and input events for better responsiveness
        this.track.addEventListener('scroll', this.onScroll.bind(this), { passive: true });
        this.track.addEventListener('touchstart', this.onTouchStart.bind(this), { passive: true });
        this.track.addEventListener('touchmove', this.onTouchMove.bind(this), { passive: true });
        this.track.addEventListener('touchend', this.onTouchEnd.bind(this), { passive: true });
      }

      onTouchStart() {
        this.isScrolling = true;
      }

      onTouchMove() {
        if (this.isScrolling) {
          // Force immediate update during touch scrolling
          requestAnimationFrame(() => {
            this.updateScrollbar();
          });
        }
      }

      onTouchEnd() {
        this.isScrolling = false;
        this.updatePaginationOnScroll();
      }

      onScroll() {
        // Immediate update for better responsiveness
        this.updateScrollbar();
        this.updateArrowState();
        
        // Debounced pagination update
        this.updatePaginationOnScroll();
      }

      updateScrollbar() {
        if (!this.scrollbarThumb || !this.track) return;

        const track = this.track;
        const thumb = this.scrollbarThumb;
        const contentWidth = track.scrollWidth;
        const visibleWidth = track.clientWidth;
        const currentScrollLeft = track.scrollLeft;
        
        // If content fits within visible area, no movement
        if (contentWidth <= visibleWidth) {
          thumb.style.marginLeft = '0%';
          return;
        }

        // Calculate scroll progress (0 to 1)
        const maxScrollLeft = contentWidth - visibleWidth;
        const scrollProgress = Math.max(0, Math.min(currentScrollLeft / maxScrollLeft, 1));
        
        // Calculate position within the available 75% space (100% - 25% thumb width)
        const maxPosition = 75; // 100% - 25% (thumb width)
        const thumbPosition = scrollProgress * maxPosition;
        
        // Apply margin-left positioning like ByCharlotte
        thumb.style.marginLeft = `${thumbPosition}%`;
        
        console.log('Scrollbar Update:', {
          scrollLeft: currentScrollLeft,
          maxScroll: maxScrollLeft,
          progress: scrollProgress,
          marginLeft: `${thumbPosition}%`
        });
      }

      setupIntersectionObserver() {
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: 0.1
        };

        this.observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              // Update scrollbar when visible
              this.updateScrollbar();
            }
          });
        }, options);

        this.observer.observe(this);
      }

      scrollLeftByOne() {
        const itemWidth = this.cards[0].offsetWidth + {{ block.settings.card_spacing }};
        this.track.scrollBy({ left: -itemWidth, behavior: 'smooth' });
      }

      scrollRightByOne() {
        const itemWidth = this.cards[0].offsetWidth + {{ block.settings.card_spacing }};
        this.track.scrollBy({ left: itemWidth, behavior: 'smooth' });
      }

      updateArrowState() {
        if (!this.track) return;
        
        const scrollLeft = this.track.scrollLeft;
        const maxScroll = this.track.scrollWidth - this.track.clientWidth;

        this.arrowLeft.classList.toggle('disabled', scrollLeft <= 1);
        this.arrowRight.classList.toggle('disabled', scrollLeft >= maxScroll - 1);
      }

      connectedCallback() {
        if (this.cards.length > 0) {
          window.addEventListener('resize', this.debouncedOnResize);
          
          // Multiple initialization attempts to ensure proper setup
          const initializeScrollbar = () => {
            this.updateArrowState();
            this.updateScrollbar();
          };
          
          // Immediate init
          initializeScrollbar();
          
          // Delayed init for DOM rendering
          setTimeout(initializeScrollbar, 50);
          setTimeout(initializeScrollbar, 200);
          
          // Init after images load
          const images = this.querySelectorAll('img');
          if (images.length > 0) {
            Promise.all(Array.from(images).map(img => {
              if (img.complete) return Promise.resolve();
              return new Promise(resolve => {
                img.onload = img.onerror = resolve;
              });
            })).then(initializeScrollbar);
          }
        }
      }

      disconnectedCallback() {
        if (this.cards.length > 0) {
          window.removeEventListener('resize', this.debouncedOnResize);
        }
        if (this.observer) {
          this.observer.disconnect();
        }
        if (this.animationFrameId) {
          cancelAnimationFrame(this.animationFrameId);
        }
        if (this.scrollTimeout) {
          clearTimeout(this.scrollTimeout);
        }
      }

      updateProperties() {
        if (window.innerWidth <= 768) {
          this.cardsPerPage = {{ block.settings.mobile_columns }};
        } else {
          this.cardsPerPage = 4.3;
        }
        this.totalPages = this.cards.length > 0 ? Math.ceil(this.cards.length / this.cardsPerPage) : 0;
        this.currentPage = this.calculateCurrentPage();
      }
      
      onResize() {
        this.updateProperties();
        this.setupPagination();
        this.updateArrowState();
        this.updatePaginationDots();
        this.updateScrollbar();
      }

      setupPagination() {
        if (!this.pagination) return;
        this.pagination.innerHTML = '';

        if (this.totalPages <= 1) {
          this.pagination.style.display = 'none';
          return;
        }
        
        this.pagination.style.display = 'flex';
        for (let i = 0; i < this.totalPages; i++) {
          const dot = document.createElement('div');
          dot.className = 'ai-product-carousel__dot-{{ ai_gen_id }}';
          dot.addEventListener('click', () => this.goToPage(i));
          this.pagination.appendChild(dot);
        }
      }

      updatePaginationOnScroll() {
        // Clear existing timeout
        if (this.scrollTimeout) {
          clearTimeout(this.scrollTimeout);
        }
        
        // Debounce the pagination update
        this.scrollTimeout = setTimeout(() => {
          this.currentPage = this.calculateCurrentPage();
          this.updatePaginationDots();
        }, 100);
      }
      
      calculateCurrentPage() {
        if (!this.track || !this.cards[0]) return 0;
        
        const scrollLeft = this.track.scrollLeft;
        const itemWidth = this.cards[0].offsetWidth + {{ block.settings.card_spacing }};
        const itemsPerPage = this.cardsPerPage;
        
        // Calculate which page we're on based on scroll position
        const page = Math.round(scrollLeft / (itemWidth * itemsPerPage));
        return Math.max(0, Math.min(page, this.totalPages - 1));
      }

      updatePaginationDots() {
        if (!this.pagination) return;
        const dots = this.pagination.children;
        for (let i = 0; i < dots.length; i++) {
          dots[i].classList.toggle('active', i === this.currentPage);
        }
      }

      goToPage(pageIndex) {
        if (!this.track || !this.cards[0]) return;
        
        const itemWidth = this.cards[0].offsetWidth + {{ block.settings.card_spacing }};
        const scrollLeft = pageIndex * itemWidth * this.cardsPerPage;
        
        this.track.scrollTo({ left: scrollLeft, behavior: 'smooth' });
        this.currentPage = pageIndex;
        this.updatePaginationDots();
      }

      debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }
    }

    customElements.define('product-carousel-{{ ai_gen_id }}', ProductCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
  {
    "name": "Product Carousel",
    "settings": [
      {
        "type": "header",
        "content": "Content"
      },
      {
        "type": "text",
        "id": "heading",
        "label": "Heading",
        "default": "TRENDING PIECES"
      },
      {
        "type": "collection",
        "id": "collection",
        "label": "Fallback Collection"
      },
      {
        "type": "product_list",
        "id": "manual_products",
        "label": "Manual Product Selection",
        "info": "Priority #1. Overrides the collection setting if products are selected here."
      },
      {
        "type": "range",
        "id": "max_products_to_show",
        "min": 4,
        "max": 50,
        "step": 1,
        "label": "Max products to show",
        "default": 12
      },
      {
        "type": "header",
        "content": "Layout & Styling"
      },
      {
        "type": "select",
        "id": "aspect_ratio",
        "label": "Image aspect ratio (Desktop)",
        "options": [
          { "value": "original", "label": "Original" },
          { "value": "square", "label": "Square (1:1)" },
          { "value": "portrait", "label": "Portrait (3:4)" }
        ],
        "default": "square"
      },
       {
        "type": "select",
        "id": "mobile_aspect_ratio",
        "label": "Image aspect ratio (Mobile)",
        "options": [
          { "value": "original", "label": "Original" },
          { "value": "square", "label": "Square (1:1)" },
          { "value": "portrait", "label": "Portrait (3:4)" }
        ],
        "default": "square"
      },
      {
        "type": "range",
        "id": "mobile_columns",
        "min": 1,
        "max": 3,
        "step": 0.1,
        "label": "Columns on mobile",
        "info": "Adjust the number of columns visible. Use decimals (e.g., 1.7) to show a part of the next item and encourage scrolling.",
        "default": 2
      },
      {
        "type": "checkbox",
        "id": "enable_mobile_scrollbar",
        "label": "Enable scrollbar on mobile",
        "default": true
      },
      {
        "type": "range",
        "id": "card_spacing",
        "min": 8,
        "max": 40,
        "step": 4,
        "unit": "px",
        "label": "Card spacing",
        "default": 16
      },
      {
        "type": "range",
        "id": "card_border_radius",
        "min": 0,
        "max": 25,
        "step": 1,
        "unit": "px",
        "label": "Card border radius",
        "default": 8
      },
      {
        "type": "header",
        "content": "Typography"
      },
      {
        "type": "font_picker",
        "id": "heading_font",
        "label": "Heading font",
        "default": "bebas_neue_n4"
      },
      {
        "type": "range",
        "id": "heading_size",
        "min": 16,
        "max": 60,
        "step": 1,
        "unit": "px",
        "label": "Heading size",
        "default": 32
      },
      {
        "type": "font_picker",
        "id": "product_font",
        "label": "Product font",
        "default": "poppins_n4"
      },
      {
        "type": "range",
        "id": "desktop_product_title_size",
        "min": 12,
        "max": 30,
        "step": 1,
        "unit": "px",
        "label": "Desktop - Title size",
        "default": 16
      },
      {
        "type": "range",
        "id": "mobile_product_title_size",
        "min": 10,
        "max": 24,
        "step": 1,
        "unit": "px",
        "label": "Mobile - Title size",
        "default": 14
      },
      {
        "type": "range",
        "id": "desktop_product_price_size",
        "min": 12,
        "max": 30,
        "step": 1,
        "unit": "px",
        "label": "Desktop - Price size",
        "default": 14
      },
      {
        "type": "range",
        "id": "mobile_product_price_size",
        "min": 10,
        "max": 24,
        "step": 1,
        "unit": "px",
        "label": "Mobile - Price size",
        "default": 13
      },
      {
        "type": "checkbox",
        "id": "heading_center",
        "label": "Center heading",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "product_text_center",
        "label": "Center product text",
        "default": false
      },
      {
        "type": "header",
        "content": "Colors & Badges"
      },
      {
        "type": "color",
        "id": "heading_color",
        "label": "Heading color",
        "default": "#000000"
      },
      {
        "type": "color",
        "id": "product_title_color",
        "label": "Product title color",
        "default": "#000000"
      },
      {
        "type": "color",
        "id": "regular_price_color",
        "label": "Regular price color",
        "default": "#000000"
      },
      {
        "type": "color",
        "id": "sale_price_color",
        "label": "Sale price color",
        "default": "#ff0000"
      },
      {
        "type": "text",
        "id": "sale_badge_text",
        "label": "Sale badge text",
        "default": "ON SALE"
      },
      {
        "type": "color",
        "id": "sale_badge_color",
        "label": "Sale badge text color",
        "default": "#ff0000"
      },
      {
        "type": "color",
        "id": "sale_badge_background_color",
        "label": "Sale badge background color",
        "default": "#ffffff"
      },
      {
        "type": "color",
        "id": "sale_badge_border_color",
        "label": "Sale badge border color",
        "default": "#ff0000"
      },
      {
        "type": "range",
        "id": "sale_badge_size",
        "min": 8,
        "max": 16,
        "step": 1,
        "unit": "px",
        "label": "Sale badge size",
        "default": 12
      },
      {
        "type": "range",
        "id": "mobile_sale_badge_size",
        "min": 1,
        "max": 16,
        "step": 1,
        "unit": "px",
        "label": "Sale badge size on mobile",
        "default": 10
      },
      {
        "type": "header",
        "content": "Sale Badge Positioning"
      },
      {
        "type": "range",
        "id": "sale_badge_position_top_desktop",
        "min": 0,
        "max": 50,
        "step": 1,
        "unit": "px",
        "label": "Desktop - Top position",
        "default": 10
      },
      {
        "type": "range",
        "id": "sale_badge_position_left_desktop",
        "min": 0,
        "max": 50,
        "step": 1,
        "unit": "px",
        "label": "Desktop - Left position",
        "default": 10
      },
      {
        "type": "range",
        "id": "sale_badge_position_top_mobile",
        "min": 0,
        "max": 50,
        "step": 1,
        "unit": "px",
        "label": "Mobile - Top position",
        "default": 10
      },
      {
        "type": "range",
        "id": "sale_badge_position_left_mobile",
        "min": 0,
        "max": 50,
        "step": 1,
        "unit": "px",
        "label": "Mobile - Left position",
        "default": 10
      }
    ],
    "presets": [
      {
        "name": "Product Carousel"
      }
    ]
  }
{% endschema %}